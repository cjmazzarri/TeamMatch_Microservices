openapi: 3.0.1
info:
  title: Game Endpoint OpenAPI definition
  version: v1
servers:
  - url: http://localhost:8081
    description: Generated server url
tags:
  - name: Game
    description: Everything about your TeamMatch games.
  - name: Team
    description: Everything about your TeamMatch teams.
  - name: Filter
    description: Everything about your TeamMatch filters.
  - name: Player
    description: Everything about TeamMatch players.
paths:
  /api/games/{gameId}:
    get:
      tags:
        - Game
      summary: "Get Game by Id"
      description: "Returns a game by the Game Id from TeamMatch"
      operationId: "getGameById"
      parameters:
        - name: "gameId"
          in: "path"
          description: "ID of player to return profile"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GameResource'
        "404":
          description: "Game with Game ID not found"
    put:
      tags:
        - Game
      summary: "Update Game"
      description: "Updates a game from TeamMatch"
      operationId: "updateGame"
      parameters:
        - name: "gameId"
          in: "path"
          description: "ID of player to update profile"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveGameResource'
        required: true
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GameResource'
        "400":
          description: "Invalid game format"
        "404":
          description: "Game not found"
    post:
      tags:
        - Game
      summary: "Create Game"
      description: "Create a new game for TeamMatch"
      operationId: "createGame"
      parameters:
        - name: "gameId"
          in: "path"
          description: "Adding a game to the application"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveGameResource'
        required: true
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GameResource'
        "400":
          description: "Invalid game format"
    delete:
      tags:
        - Game
      summary: "Delete Game"
      description: "Deletes a game from TeamMatch"
      operationId: "deleteGame"
      parameters:
        - name: "gameId"
          in: "path"
          description: "Deletion of a Game"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                type: object

  /api/teams:
    post:
      tags:
        - Team
      summary: "Create Team"
      description: "Create a new team for TeamMatch"
      operationId: "createTeam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveTeamResource'
        required: true
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TeamResource'
        "400":
          description: "Invalid team format"

  /api/teams/{teamId}:
    get:
      tags:
        - Team
      summary: "Get Team by Id"
      description: "Returns a team by the Team Id from TeamMatch"
      operationId: "getTeamById"
      parameters:
        - name: "teamId"
          in: "path"
          description: "ID of team to return"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TeamResource'
        "404":
          description: "Team with Game ID not found"
    put:
      tags:
        - Team
      summary: "Update Team"
      description: "Updates a team from TeamMatch"
      operationId: "updateTeam"
      parameters:
        - name: "teamId"
          in: "path"
          description: "ID of team to update team"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveTeamResource'
        required: true
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TeamResource'
        "400":
          description: "Invalid team format"
        "404":
          description: "Team not found"

  /api/filters:
    post:
      tags:
        - Filter
      summary: "Create Filter"
      description: "Create a new filter for TeamMatch"
      operationId: "createFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveFilterResource'
        required: true
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FilterResource'
        "400":
          description: "Invalid filter format"

  /api/filters/{filterId}:
    get:
      tags:
        - Filter
      summary: "Get Filter by Id"
      description: "Returns a filter by the Filter Id from TeamMatch"
      operationId: "getFilterById"
      parameters:
        - name: "filterId"
          in: "path"
          description: "ID of filter to return"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FilterResource'
        "404":
          description: "Team with Filter ID not found"
    put:
      tags:
        - Filter
      summary: "Update Filter"
      description: "Updates a filter from TeamMatch"
      operationId: "updateFilter"
      parameters:
        - name: "filterId"
          in: "path"
          description: "ID of filter to update team"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveFilterResource'
        required: true
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FilterResource'
        "400":
          description: "Invalid filter format"
        "404":
          description: "Filter not found"
    delete:
      tags:
        - Filter
      summary: "Delete Filter"
      description: "Deletes a filter from TeamMatch"
      operationId: "deleteFilter"
      parameters:
        - name: "filterId"
          in: "path"
          description: "Deletion of a Filter"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                type: object
          description: "Invalid player format"

components:
  schemas:
    SaveGameResource:
      required:
        - name
        - gameTeamSize
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          maxLength: 20
          minLength: 0
          type: string
          example: "Apex Legends"
        gameTeamSize:
          type: integer
          example: 3
    GameResource:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Apex Legends"
        gameTeamSize:
          type: integer
          example: 3
    TeamResource:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        teamName:
          type: string
          example: "Los Malvados"
        teamSize:
          type: integer
          example: 5
        average:
          type: integer
          example: 3.0
        hoursPlayed:
          type: integer
          example: 5
    SaveTeamResource:
      required:
        - teamName
        - teamSize
        - average
        - hoursPlayed
      type: object
      properties:
        teamName:
          type: string
          example: "Los Malvados"
        teamSize:
          type: integer
          example: 5
        average:
          type: integer
          example: 3.0
        hoursPlayed:
          type: integer
          example: 5
    SaveFilterResource:
      required:
        - game
        - age
        - region
        - gameStyle
        - accountLevel
        - rating
      type: object
      properties:
        game:
          type: string
          example: "APEX Legends"
        age:
          type: integer
          example: 20
        region:
          type: string
          example: "Peru"
        gameStyle:
          type: string
          example: "casual"
        accountLevel:
          type: integer
          example: 34
        rating:
          type: number
          example: 3.4
    FilterResource:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        game:
          type: string
          example: "APEX Legends"
        age:
          type: integer
          example: 20
        region:
          type: string
          example: "Peru"
        gameStyle:
          type: string
          example: "casual"
        accountLevel:
          type: integer
          example: 34
        rating:
          type: number
          example: 3.4
    PlayerResource:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        username:
          type: string
          example: "Ninja"
        password:
          type: string
          example: "n1nj4pwd"
        hours:
          type: integer
          format: int64
          example: 5
        last_connection:
          type: string
          example: "2021-06-05 12:34"
    PagePlayerResource:
      type: object
      properties:
        totalPages:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PlayerResource'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    SavePlayerResource:
      required:
        - username
        - password
        - hours
        - last_connection
      type: object
      properties:
        username:
          type: string
          example: "Ninja"
        password:
          type: string
          example: "n1nj4pwd"
        hours:
          type: integer
          format: int64
          example: 5
        last_connection:
          type: string
          example: "2021-06-05 12:34"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"